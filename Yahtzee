import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Container;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;

public class Yahtzee implements ActionListener {
	//global variables
	JFrame frame = new JFrame ();
	Container diceContainer = new Container();
	JButton[] diceButtons = new JButton[6];
	ImageIcon[] imageIcons = new ImageIcon[6];
	int[] buttonState = new int[6];
	int[] dieValue = new int[6];
	final int HOT_DIE = 0;
	final int SCORE_DIE = 1;
	final int LOCKED_DIE = 2;
	Container buttonContainer = new Container();
	JButton rollButton = new JButton("Roll");
	JButton scoreButton = new JButton("Score");
	JButton stopButton = new JButton ("Stop");
	Container labelContainer = new Container();
	JLabel currentScoreLBL = new JLabel("Current Score: 0");
	JLabel totalScoreLBL = new JLabel("Final Score: 0");
	JLabel currentRoundLBL = new JLabel("Current Round: 0");
	int currentScore = 0;
	int totalScore = 0;
	int currentRound = 1;
	
	public Yahtzee() {
		frame.setSize(600, 600);
		imageIcons[0] = resizeImage("./Dice Images/die_1.png");
		imageIcons[1] = resizeImage("./Dice Images/die_2.png");
		imageIcons[2] = resizeImage("./Dice Images/die_3.png");
		imageIcons[3] = resizeImage("./Dice Images/die_4.png");
		imageIcons[4] = resizeImage("./Dice Images/die_5.png");

		diceContainer.setLayout(new GridLayout(2, 3));
		for (int a = 0; a < diceButtons.length; a++) {
			diceButtons[a] = new JButton ();
			diceButtons[a].setIcon(imageIcons[a]);
			diceButtons[a].setEnabled(false);
			diceButtons[a].addActionListener(this);
			diceButtons[a].setBackground(Color.WHITE);
			diceContainer.add(diceButtons[a]);
		}
		buttonContainer.setLayout(new GridLayout(1, 3));
		buttonContainer.add(rollButton);
		rollButton.addActionListener(this);
		buttonContainer.add(scoreButton);
		scoreButton.addActionListener(this);
		scoreButton.setEnabled(false);
		buttonContainer.add(stopButton);
		stopButton.addActionListener(this);
		stopButton.setEnabled(false);
		labelContainer.setLayout(new GridLayout(3, 1));
		labelContainer.add(currentScoreLBL);
		labelContainer.add(totalScoreLBL);
		labelContainer.add(currentRoundLBL);
		
		
		frame.setLayout(new BorderLayout());
		frame.add(diceContainer, BorderLayout.CENTER);
		frame.add(buttonContainer, BorderLayout.NORTH);
		frame.add(labelContainer, BorderLayout.SOUTH);
		
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setVisible(true);
	}
	
	public ImageIcon resizeImage(String path) { // method to resize dice images
		ImageIcon imageIcon = new ImageIcon(path); // load the image to a ImageIcon
		Image image = imageIcon.getImage(); // returns image
		Image newimg = image.getScaledInstance(120, 120,  java.awt.Image.SCALE_SMOOTH); // scales image
		imageIcon = new ImageIcon(newimg);  // transform it back
		return imageIcon;
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		if (e.getSource().equals(rollButton)) { //what happens when the roll button is pressed
			for (int a = 0; a < diceButtons.length; a++) {
				if (buttonState[a] == HOT_DIE) {
					int choice = (int)(Math.random() * 6);
					dieValue[a] = choice;
					diceButtons[a].setIcon(imageIcons[choice]);
					diceButtons[a].setEnabled(true);
					rollButton.setEnabled(false);
					scoreButton.setEnabled(true);
					stopButton.setEnabled(true);
				}
			}
		}
		
	}
	
	public static void main(String[] args) {
		new Yahtzee(); 
	}

}
